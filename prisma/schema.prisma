// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["extendedWhereUnique"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String?
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String          @id @default(cuid())
    name           String?
    email          String          @unique
    password       String
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    role           USER_ROLE
    teacherProfile TeacherProfile?
    studentProfule StudentProfile?
}

enum USER_ROLE {
    GLOBAL_ADMIN
    TEACHER
    STUDENT
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model TeacherProfile {
    id      String @id @default(cuid())
    userId  String @unique
    account User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    firstName   String?
    lastName    String?
    dateOfBirth DateTime?

    teachingSubjects TeachingSubject[]
    ownedClassrooms  Classroom[]
    createdGrades    Grade[]
}

model TeachingSubject {
    id               String          @id @default(cuid())
    name             String
    degree           DEGREE
    almaMater        String
    teacherProfile   TeacherProfile? @relation(fields: [teacherProfileId], references: [id])
    teacherProfileId String?
}

model Classroom {
    id String @id @default(cuid())

    name                String
    maxNumberOfStudents Int
    teacherProfile      TeacherProfile? @relation(fields: [teacherProfileId], references: [id])
    teacherProfileId    String?

    students StudentProfile[]
}

model StudentProfile {
    id        String @id @default(cuid())
    firstName String
    lastName  String

    classrooms     Classroom[]
    userId         String?     @unique
    user           User?       @relation(fields: [userId], references: [id])
    receivedGrades Grade[]
}

model Grade {
    id               String         @id @default(cuid())
    studentProfileId String
    studentProfile   StudentProfile @relation(fields: [studentProfileId], references: [id])

    teacherProfileId String
    teacherProfile   TeacherProfile @relation(fields: [teacherProfileId], references: [id])

    value       GRADE_SCALE
    subjectName String
    description String?

    createdAt DateTime @default(now())
}

enum GRADE_SCALE {
    A
    B
    C
    D
    E
    F
}

enum DEGREE {
    BACHELOR
    ENGINEER
    DOCTOR
    PROFESSOR
}
